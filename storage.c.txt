#include <reg52.h>
#include "eeprom.h"
#include "global_var.h"

#define SECRIT     0x6ffd
#define START      0x6ffe

#define ZERO_ADD_1 0x6fF0
#define ZERO_ADD_2 0x6fF1

#define K2_ADD_1    0x6fF2
#define K2_ADD_2    0x6fF3

#define K1_ADD_1    0x6fFB
#define K1_ADD_2    0x6fFC

#define INTEGRAL   0x6ff4

#define AREA_1     0x6ff9
#define AREA_2     0x6ffa

#define UNIT       0x6ff7

#define RANGE      0x6ff8

#define RANGEMIN1  0x6ff5
#define RANGEMIN2  0x6ff6

#define SECRIT_NUM 0x6fff

#define ISCH4      0x6fef

#define MAXOUT     0x6fea

#define SUM1       0x6fee
#define SUM2       0x6fed
#define SUM3       0x6fec
#define SUM4       0x6feb


#define START1     0x6af0
#define START2     0x6af1


void dat_Init()
{

   char temp1,temp2,temp3,temp4;
   temp1 = IapReadByte(START1);
   temp2 = IapReadByte(START2);
   if(temp1 ==10 && temp2 == 10)
   {
        /*面积参数初始化*/
		temp1 =IapReadByte(AREA_1);
		temp2 =IapReadByte(AREA_2);
        g_iArea = temp1*100+temp2;

		/*积分系数初始化话*/
        g_cIntegral = IapReadByte(INTEGRAL);

		/*零点值出事化*/
        temp1 = IapReadByte(ZERO_ADD_1);
		temp2 = IapReadByte(ZERO_ADD_2);
		g_fZero = (temp1*100+temp2)/100;

		/*比例值初始化*/
        temp1 = IapReadByte(K1_ADD_1);
		temp2 = IapReadByte(K1_ADD_2);
		g_fK1 = (temp1*100+temp2)/1000;

		/*补偿系数初始化*/
        temp1 = IapReadByte(K2_ADD_1);
		temp2 = IapReadByte(K2_ADD_2);
		g_fK2 = (temp1*100+temp2)/100;

	    /*单位初始化*/
		g_cUint =  IapReadByte(UNIT);

		/*量程初始化 秒为单位*/
		g_iRange = IapReadByte(RANGE);
	    
		/*量程初始化 分钟为单位*/
		 temp1 = IapReadByte(RANGEMIN1);
		 temp2 = IapReadByte(RANGEMIN2);
		 g_iRangeMin = temp1*100+temp2;

		 g_cSecrit = IapReadByte(SECRIT);

		 g_cIsCh4  = IapReadByte(ISCH4);

		 g_cMaxOut = IapReadByte(MAXOUT);

		 g_cStart =  IapReadByte(START);
	//	 g_cSecrit_Num =IapReadByte(SECRIT_NUM);

		 temp1 = IapReadByte(SUM1);
		 temp2 = IapReadByte(SUM2);
		 temp3 = IapReadByte(SUM3);
		 temp4 = IapReadByte(SUM4);
		 g_fSum = temp1+temp2*100.0+temp3*10000.0+temp4*1000000.0;
   }
   else
   {

     g_iArea = 10000; //1.0平方米
	 g_cIntegral = 0; //0
	 g_fZero = 0.0;
	 g_fK1 = 1.0;
	 g_fK2 = 1.0;
	 g_cUint = 1;
	 g_iRange = 1;
	 g_iRangeMin = 100;
	 g_cSecrit = 0;
	 g_cStart = 0;
	 g_cSecrit_Num = 0;
	 g_cIsCh4 = 0;
	 g_fSum = 0;
	 g_cMaxOut = 0;
	 EA = 0;
	 IapEraseSector(ZERO_ADD_1);
//	 IapEraseSector(0x6fff);
//	 IapEraseSector(0x6ffe);

	 IapProgramByte(0,SECRIT);
	 //IapProgramByte(0,SECRIT_NUM);
     IapProgramByte(0,START);

	 IapProgramByte(0,ZERO_ADD_1);
	 IapProgramByte(0,ZERO_ADD_2);
//
	 IapProgramByte(10,K1_ADD_1);
	 IapProgramByte(0,K1_ADD_2);

	 IapProgramByte(1,K2_ADD_1);
	 IapProgramByte(0,K2_ADD_2);

//	 IapEraseSector(INTEGRAL);
	 IapProgramByte(g_cIntegral,INTEGRAL);   //IapProgramByte(0,INTEGRAL);

//	 IapEraseSector(AREA_1);
	 IapProgramByte(100,AREA_1); //1.0平方米
	 IapProgramByte(0,AREA_2);

//	 IapEraseSector(RANGE);
	 IapProgramByte(g_iRange,RANGE);

	  IapProgramByte(1,RANGEMIN1);
	  IapProgramByte(0,RANGEMIN2);

//	 IapEraseSector(UNIT);
	 IapProgramByte(0,UNIT);
 
     IapProgramByte(0,ISCH4);

	 IapProgramByte(0,MAXOUT);

     IapProgramByte(0,SUM1);
	 IapProgramByte(0,SUM2);
	 IapProgramByte(0,SUM3);
	 IapProgramByte(0,SUM4);

	 IapEraseSector(START1);
	 IapEraseSector(START2);
	 IapProgramByte(10,START1);
	 IapProgramByte(10,START2);
   } 
   EA = 1;
}

void Dateeprom()
{
   unsigned char temp1,temp2,temp3,temp4;
   //EA = 0;
  
  // IapEraseSector(ZERO_ADD_1);
  // IapEraseSector(ZERO_ADD_2);
//
  // IapEraseSector(K1_ADD_1);
  // IapEraseSector(K1_ADD_2);

  // IapEraseSector(K2_ADD_1);
   //IapEraseSector(K2_ADD_2);
//
   //IapEraseSector(INTEGRAL);


   //IapEraseSector(UNIT);

   //IapEraseSector(RANGE);

   //IapEraseSector(RANGEMIN1);
   //IapEraseSector(RANGEMIN2);

   //IapEraseSector(AREA_1);
   //IapEraseSector(AREA_2);

   IapEraseSector(ISCH4);


    temp1 = g_iArea/100;
	temp2 = g_iArea%100;
	
	IapProgramByte(temp1,AREA_1);
	IapProgramByte(temp2,AREA_2);

   g_fZero = g_fZero*100;
   temp1 = (int)g_fZero/100;
   temp2 = (int)g_fZero%100;
   IapProgramByte(temp1,ZERO_ADD_1);
   IapProgramByte(temp2,ZERO_ADD_2);
   g_fZero = g_fZero/100;
   
   g_fK1 = g_fK1*1000;
   temp1 = (int)g_fK1/100;
   temp2 = (int)g_fK1%100;
   IapProgramByte(temp1,K1_ADD_1);
   IapProgramByte(temp2,K1_ADD_2);
   g_fK1 = g_fK1/1000;

   g_fK2 = g_fK2*100;
   temp1 = (int)g_fK2/100;
   temp2 = (int)g_fK2%100;
   IapProgramByte(temp1,K2_ADD_1);
   IapProgramByte(temp2,K2_ADD_2);
   g_fK2 = g_fK2/100;

   IapProgramByte(g_cIntegral,INTEGRAL);

	IapProgramByte(g_iRange,RANGE);

	temp1 = g_iRangeMin/100;
	temp2 = g_iRangeMin%100;
 	IapProgramByte(temp1,RANGEMIN1);
	IapProgramByte(temp2,RANGEMIN2);

	IapProgramByte(g_cUint,UNIT);

    IapProgramByte(g_cIsCh4,ISCH4);

    IapProgramByte(g_cMaxOut,MAXOUT);
	temp1 = ((long)(g_fSum))%100L;
	temp2 = ((long)(g_fSum))%10000L/100L;
	temp3 = ((long)(g_fSum))%1000000L/10000L;
	temp4 = ((long)(g_fSum))%100000000L/1000000L;
	IapProgramByte(temp1,SUM1);
	IapProgramByte(temp2,SUM2);
	IapProgramByte(temp3,SUM3);
	IapProgramByte(temp4,SUM4);

	IapProgramByte(g_cSecrit,SECRIT);
	IapProgramByte(g_cStart,START);
	//IapProgramByte(g_cSecrit_Num,SECRIT_NUM);


     
}
